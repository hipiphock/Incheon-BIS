package com.bis.dao;

import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.stereotype.Repository;

import com.bis.vo.BisParameterVO;
import com.bis.vo.DatePlanVO;
import com.bis.vo.SystemInformationVO;
import com.bis.vo.TableSpaceVO;
import com.bis.vo.re.TbEcmExorgVO;
import com.bis.vo.re.TbEcmExorgresponVO;
import com.bis.vo.re.TbOmmAdminareaVO;
import com.bis.vo.re.TbOmmCodeVO;
import com.bis.vo.re.TbOmmProcessVO;
import com.bis.vo.re.TbOmmUserVO;
import com.bis.vo.re.TbOmmViolparamVO;
import com.bis.vo.re.TbServerStatusVO;

/**
 * 
 * <PRE>
 * System Name 	  : 인천 BIS - 운영단말
 * Business Name  : 
 * Class Name 	  : SystemDAO.java
 * Description 	  : 
 * Modification History 
 *   수정일                        수정자       		    수정내용
 * ----------   ---------   -------------------------------
 * 2017.09.20	    황중모                       최초생성
 * </PRE>
 * @version 1.0
 * @author Copyright (C) 2017 by IncheonBis All right reserved.
 */
@Repository("systemDAO")
public class SystemDAO {

	@Resource
    private SqlSessionTemplate sqlSession;
	
	/**
     * 유지보수업체정보관리 - 관계기관정보검색 (v0609)
     */
    public List<TbEcmExorgVO> selectRelatorgList(TbEcmExorgVO vo) throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectRelatorgList", vo);
    }
    
    /**
     * 유지보수업체정보관리 - 관계기관정보검색 (v0609)
     */
    public TbEcmExorgVO selectMaxRelatorgid() throws SQLException {
    	return sqlSession.selectOne("SYSTEM.selectMaxRelatorgid");
    }
    
    /**
     * 유지보수업체정보관리 - 관계기관정보 신규등록(v0609)
     */
    public int insertRelatorg(TbEcmExorgVO vo) throws SQLException {
    	return sqlSession.insert("SYSTEM.insertRelatorg", vo);
    }
    
    /**
     *유지보수업체정보관리 - 관계기관정보 내용 수정(v0609)
     */
    public int updateRelatorg(TbEcmExorgVO vo) throws SQLException {
    	return sqlSession.insert("SYSTEM.updateRelatorg", vo);
    }
    
    /**
     *유지보수업체정보관리 - 관계기관정보 내용 삭제(v0609)
     */
    public int deleteRelatorg(TbEcmExorgVO vo) throws SQLException {
    	return sqlSession.insert("SYSTEM.deleteRelatorg", vo);
    }

    /**
     *유지보수업체정보관리 - 관계기관정보 담당자 삭제(v0609)
     */
    public int deleteExorgrespon(TbEcmExorgVO vo) throws SQLException {
    	return sqlSession.insert("SYSTEM.deleteExorgrespon", vo);
    }
    
    /**
     * 유지보수업체정보관리 -담당자정보검색(v0609)
     */
    public List<TbEcmExorgresponVO> selectExorgresponList(TbEcmExorgresponVO vo) throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectExorgresponList", vo);
    }
    
    /**
     *유지보수업체정보관리 - 담당자 신규등록(v0609)
     */
    public int insertExorgrespon(TbEcmExorgresponVO vo) throws SQLException {
    	return sqlSession.insert("SYSTEM.insertExorgrespon", vo);
    }
    
    /**
     *유지보수업체정보관리 - 담당자 내용 수정(v0609)
     */
    public int updateExorgrespon(TbEcmExorgresponVO vo) throws SQLException {
    	return sqlSession.insert("SYSTEM.updateExorgrespon", vo);
    }
    
    /**
     * BIT외부충격이력 - (인천)유지보수 업체 정보 (v0611)
     */
    public List<TbEcmExorgVO> selectRelatorgInfo(TbEcmExorgVO vo) throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectRelatorgInfo", vo);
    }
    
	/**
     * 코드 카테고리 조회
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<TbOmmCodeVO> selectCodeCateList(TbOmmCodeVO vo) throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectCodeCateList", vo);
    }

	/**
     * 코드 목록 조회
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<TbOmmCodeVO> selectCodeList(TbOmmCodeVO vo) throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectCodeList", vo);
    }
    
    /**
     * 신규 코드  조회
     * @param vo
     * @return
     * @throws SQLException
     */
    public TbOmmCodeVO selectNewCodeCd(TbOmmCodeVO vo) throws SQLException {
    	return sqlSession.selectOne("SYSTEM.selectNewCodeCd", vo);
    }
    
	/**
     * 관계기관 조회
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<TbOmmCodeVO> selectRelatorgidList(TbOmmCodeVO vo) throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectRelatorgidList", vo);
    }
    
    /**
     * 코드 삭제
     * @param vo
     * @return
     * @throws SQLException
     */
    public int deleteCode(TbOmmCodeVO vo) throws SQLException {
    	return sqlSession.update("SYSTEM.deleteCode", vo);
    }
    
    /**
     * 코드 삽입
     * @param vo
     * @return
     * @throws SQLException
     */
    public int insertCode(TbOmmCodeVO vo) throws SQLException {
    	return sqlSession.update("SYSTEM.insertCode", vo);
    }

    /**
     * 서버 상태 목록 조회
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<TbServerStatusVO> selectServerStateList() throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectServerStateList");
    }
    
    /**
     * 서버별 BIT 상태 조회 
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<TbServerStatusVO> selectBitServerStatList() throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectBitServerStatList");
    }
    
    /**
     * 코드 카테고리 삭제
     * @param vo
     * @return
     * @throws SQLException
     */
    public int deleteCodecategory(TbOmmCodeVO vo) throws SQLException {
    	return sqlSession.delete("SYSTEM.deleteCodecategory", vo);
    }
    
    /**
     * 코드 카테고리 수정
     * @param vo
     * @return
     * @throws SQLException
     */
    public int updateCodecategory(TbOmmCodeVO vo) throws SQLException {
    	return sqlSession.update("SYSTEM.updateCodecategory", vo);
    }
    
    /**
     * 코드 카테고리 등록
     * @param vo
     * @return
     * @throws SQLException
     */
    public int insertCodecategory(TbOmmCodeVO vo) throws SQLException {
    	return sqlSession.insert("SYSTEM.insertCodecategory", vo);
    }
    
    /**
     * 행정구역 정보조회 - 행정구역 조회
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<TbOmmAdminareaVO> selectAdminareaList(TbOmmAdminareaVO vo) {
		return sqlSession.selectList("SYSTEM.selectAdminareaList",vo);
	}
    
    /**
     * 운영파라미터관리 - 프로세스조회
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<TbOmmProcessVO> selectProcessList(TbOmmProcessVO vo) {
		return sqlSession.selectList("SYSTEM.selectProcessList",vo);
	}
    
    /**
     * 운영파라미터관리 - 프로세스입력
     * @param vo
     * @return
     * @throws SQLException
     */
	public int insertProcess(TbOmmProcessVO vo) {
		return sqlSession.insert("SYSTEM.insertProcess",vo);
	}

	/**
     * 운영파라미터관리 - 프로세스수정
     * @param vo
     * @return
     * @throws SQLException
     */
	public int updateProcess(TbOmmProcessVO vo) {
		return sqlSession.update("SYSTEM.updateProcess",vo);
	}

	/**
     * 운영파라미터관리 - 프로세스삭제
     * @param vo
     * @return
     * @throws SQLException
     */
	public int deleteProcess(TbOmmProcessVO vo) {
		return sqlSession.delete("SYSTEM.deleteProcess",vo);
	}
    
    
	/**
     * 운영위반기준정보관리 - 운행위반기준정보검색
     * @param vo
     * @return
     * @throws SQLException
     */
	public List<TbOmmViolparamVO> selectViolateList(TbOmmViolparamVO vo) {
		return sqlSession.selectList("SYSTEM.selectViolateList",vo);
	}
	
	/**
     * 운영위반기준정보관리 - 운행위반기준정보 신규등록
     * @param vo
     * @return
     * @throws SQLException
     */
	public int insertViolate(TbOmmViolparamVO vo) {
		return sqlSession.insert("SYSTEM.insertViolate",vo);
	}

	/**
     * 운영위반기준정보관리 - 운행위반기준정보 수정
     * @param vo
     * @return
     * @throws SQLException
     */
	public int updateViolate(TbOmmViolparamVO vo) {
		return sqlSession.update("SYSTEM.updateViolate",vo);
	}

	/**
     * 운영위반기준정보관리 - 운행위반기준정보 삭제
     * @param vo
     * @return
     * @throws SQLException
     */
	public int deleteViolate(TbOmmViolparamVO vo) {
		return sqlSession.delete("SYSTEM.deleteViolate",vo);
	}

	
	//######################## 이하 구 버전 / 수정 코드 위로 올리기 #####################
	
	
	/**
     * 테이블 스페이스 및 상태 조회
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<TableSpaceVO> selectTableSpaceList() throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectTableSpaceList");
    }
    
	/**
     * 시스템 등록
     * @param vo
     * @return
     * @throws SQLException
     */
	public int insertSysInfo(SystemInformationVO vo) throws SQLException {
    	return sqlSession.insert("SYSTEM.insertSysInfo", vo);
    }
	
    /**
     * 파라미터 그룹 조회 
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<BisParameterVO> selectParamGrpList() throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectParamGrpList");
    }
	
    /**
     * 파라미터 조회 
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<BisParameterVO> selectParamList(BisParameterVO vo) throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectParamList", vo);
    }
	
    /**
     * 시스템 접속 이력 조회
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<TbOmmUserVO> selectLoginHisList(TbOmmUserVO vo) throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectLoginHisList", vo);
    }
    
    /**
     * 파라미터 수정
     * @param vo
     * @return
     * @throws SQLException
     */
    public int updateParameter(BisParameterVO vo) throws SQLException {
    	return sqlSession.update("SYSTEM.updateParameter", vo);
    }

    /**
     * 공휴일 조회
     * @param vo
     * @return
     * @throws SQLException
     */
    public List<DatePlanVO> selectHolidayList(DatePlanVO vo) throws SQLException {
    	return sqlSession.selectList("SYSTEM.selectHolidayList", vo);
    }
    
    /**
     * 공휴일 등록
     * @param vo
     * @return
     * @throws SQLException
     */
    public int insertHoliday(DatePlanVO vo) throws SQLException {
    	return sqlSession.insert("SYSTEM.insertHoliday", vo);
    }

    /**
     * 공휴일 수정
     * @param vo
     * @return
     * @throws SQLException
     */
    public int updateHoliday(DatePlanVO vo) throws SQLException {
    	return sqlSession.update("SYSTEM.updateHoliday", vo);
    }
    
    /**
     * 공휴일 삭제
     * @param vo
     * @return
     * @throws SQLException
     */
    public int deleteHoliday(DatePlanVO vo) throws SQLException {
    	return sqlSession.delete("SYSTEM.deleteHoliday", vo);
    }



	

	
}
